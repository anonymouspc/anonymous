import cppmake

async def build():
    await cppmake.cmake(
        name="openal",
        dir="./package/openal",
        args=[
            "-DLIBTYPE=static",
            "-DALSOFT_EXAMPLES=false",
            "-DALSOFT_TESTS=false",
            "-DALSOFT_UTILS=false"
        ]
    )

"""
>>> cat package/openal/CMakeLists.txt | grep option
        "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
option(ALSOFT_DLOPEN  "Check for the dlopen API for loading optional libs"  ON)
option(ALSOFT_WERROR  "Treat compile warnings as errors"      OFF)
option(ALSOFT_UTILS "Build utility programs"  ON)
option(ALSOFT_NO_CONFIG_UTIL "Disable building the alsoft-config utility" OFF)
option(ALSOFT_EXAMPLES  "Build example programs"  ON)
option(ALSOFT_TESTS "Build test programs"  OFF)
option(ALSOFT_INSTALL "Install main library" ON)
option(ALSOFT_INSTALL_CONFIG "Install alsoft.conf sample configuration file" ON)
option(ALSOFT_INSTALL_HRTF_DATA "Install HRTF data files" ON)
option(ALSOFT_INSTALL_AMBDEC_PRESETS "Install AmbDec preset files" ON)
option(ALSOFT_INSTALL_EXAMPLES "Install example programs (alplay, alstream, ...)" ON)
option(ALSOFT_INSTALL_UTILS "Install utility programs (openal-info, alsoft-config, ...)" ON)
option(ALSOFT_UPDATE_BUILD_VERSION "Update git build version info" ON)
option(ALSOFT_EAX "Enable legacy EAX extensions" ${WIN32})
option(ALSOFT_SEARCH_INSTALL_DATADIR "Search the installation data directory" OFF)
    option(FORCE_STATIC_VCRT "Force /MT for static VC runtimes" OFF)
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-faligned-new=8>")
            message(NOTICE "Unsupported STL hardening option \"${ALSOFT_STL_HARDENING}\", using Default")
            message(NOTICE "Unsupported STL hardening option \"${ALSOFT_STL_HARDENING}\", using Default")
            message(NOTICE "Unsupported STL hardening option \"${ALSOFT_STL_HARDENING}\", using Default")
option(ALSOFT_ENABLE_MODULES "Enable use of C++20 modules when supported" ON)
    option(ALSOFT_BUILD_ROUTER  "Build the router (EXPERIMENTAL; creates OpenAL32.dll and soft_oal.dll)"  OFF)
        option(ALSOFT_BUILD_IMPORT_LIB "Build an import .lib using dlltool (requires sed)" ON)
    option(ALSOFT_OSX_FRAMEWORK "Build as macOS framework" OFF)
    option(ALSOFT_STATIC_LIBGCC "Force -static-libgcc for static GCC runtimes" OFF)
    option(ALSOFT_STATIC_STDCXX "Static link libstdc++" OFF)
        option(ALSOFT_STATIC_WINPTHREAD "Static link libwinpthread" OFF)
# Set visibility/export options if available
    # Yes GCC, really don't accept command line options you don't support
option(ALSOFT_CPUEXT_SSE "Enable SSE support" ON)
option(ALSOFT_REQUIRE_SSE "Require SSE support" OFF)
option(ALSOFT_CPUEXT_SSE2 "Enable SSE2 support" ON)
option(ALSOFT_REQUIRE_SSE2 "Require SSE2 support" OFF)
option(ALSOFT_CPUEXT_SSE3 "Enable SSE3 support" ON)
option(ALSOFT_REQUIRE_SSE3 "Require SSE3 support" OFF)
option(ALSOFT_CPUEXT_SSE4_1 "Enable SSE4.1 support" ON)
option(ALSOFT_REQUIRE_SSE4_1 "Require SSE4.1 support" OFF)
option(ALSOFT_CPUEXT_NEON "Enable ARM NEON support" ON)
option(ALSOFT_REQUIRE_NEON "Require ARM NEON support" OFF)
    option(ALSOFT_ENABLE_SSE2_CODEGEN "Enable SSE2 code generation instead of x87 for 32-bit targets." TRUE)
    option(ALSOFT_RTKIT "Enable RTKit support" ON)
    option(ALSOFT_REQUIRE_RTKIT "Require RTKit/D-Bus support" FALSE)
option(ALSOFT_BACKEND_PIPEWIRE "Enable PipeWire backend" ON)
option(ALSOFT_REQUIRE_PIPEWIRE "Require PipeWire backend" OFF)
option(ALSOFT_BACKEND_PULSEAUDIO "Enable PulseAudio backend" ON)
option(ALSOFT_REQUIRE_PULSEAUDIO "Require PulseAudio backend" OFF)
    option(ALSOFT_BACKEND_ALSA "Enable ALSA backend" ON)
    option(ALSOFT_REQUIRE_ALSA "Require ALSA backend" OFF)
    option(ALSOFT_BACKEND_OSS "Enable OSS backend" ON)
    option(ALSOFT_REQUIRE_OSS "Require OSS backend" OFF)
    option(ALSOFT_BACKEND_SOLARIS "Enable Solaris backend" ON)
    option(ALSOFT_REQUIRE_SOLARIS "Require Solaris backend" OFF)
        option(ALSOFT_BACKEND_SNDIO "Enable SndIO backend" ON)
        option(ALSOFT_BACKEND_SNDIO "Enable SndIO backend" OFF)
    option(ALSOFT_REQUIRE_SNDIO "Require SndIO backend" OFF)
    option(ALSOFT_BACKEND_WASAPI "Enable WASAPI backend" ON)
    option(ALSOFT_REQUIRE_WASAPI "Require WASAPI backend" OFF)
        option(ALSOFT_BACKEND_DSOUND "Enable DirectSound backend" ON)
        option(ALSOFT_REQUIRE_DSOUND "Require DirectSound backend" OFF)
        option(ALSOFT_BACKEND_WINMM "Enable Windows Multimedia backend" ON)
        option(ALSOFT_REQUIRE_WINMM "Require Windows Multimedia backend" OFF)
option(ALSOFT_BACKEND_JACK "Enable JACK backend" ON)
option(ALSOFT_REQUIRE_JACK "Require JACK backend" OFF)
option(ALSOFT_BACKEND_COREAUDIO "Enable CoreAudio backend" ON)
option(ALSOFT_REQUIRE_COREAUDIO "Require CoreAudio backend" OFF)
option(ALSOFT_BACKEND_OBOE "Enable Oboe backend" ON)
option(ALSOFT_REQUIRE_OBOE "Require Oboe backend" OFF)
option(ALSOFT_BACKEND_OPENSL "Enable OpenSL backend" ON)
option(ALSOFT_REQUIRE_OPENSL "Require OpenSL backend" OFF)
option(ALSOFT_BACKEND_PORTAUDIO "Enable PortAudio backend" ON)
option(ALSOFT_REQUIRE_PORTAUDIO "Require PortAudio backend" OFF)
option(ALSOFT_BACKEND_SDL3 "Enable SDL3 backend" OFF)
option(ALSOFT_REQUIRE_SDL3 "Require SDL3 backend" OFF)
option(ALSOFT_BACKEND_SDL2 "Enable SDL2 backend" OFF)
option(ALSOFT_REQUIRE_SDL2 "Require SDL2 backend" OFF)
option(ALSOFT_BACKEND_WAVE "Enable Wave Writer backend" ON)
option(ALSOFT_EMBED_HRTF_DATA "Embed the HRTF data files (increases library footprint)" ON)
    target_compile_options(openal.modules PRIVATE ${C_FLAGS})
    target_compile_options(alsoft.modules PRIVATE ${C_FLAGS})
target_compile_options(alsoft.common PRIVATE ${C_FLAGS})
        # This option is for static linking OpenAL Soft into another project
        option(ALSOFT_NO_UID_DEFS "Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys" OFF)
            target_compile_options(alsoft.router-modules PRIVATE ${C_FLAGS})
        target_compile_options(OpenAL PRIVATE ${C_FLAGS})
        target_link_options(${IMPL_TARGET} PRIVATE
target_compile_options(${IMPL_TARGET} PRIVATE ${C_FLAGS})
        target_link_options(OpenAL PRIVATE "-Wl,--output-def,${PROJECT_BINARY_DIR}/OpenAL32.def")
    target_compile_options(openal-info PRIVATE ${C_FLAGS})
        target_compile_options(uhjdecoder PRIVATE ${C_FLAGS})
        target_compile_options(uhjencoder PRIVATE ${C_FLAGS})
        target_compile_options(alsoft.sofa-support PRIVATE ${C_FLAGS})
        target_compile_options(makemhr PRIVATE ${C_FLAGS})
        target_compile_options(sofa-info PRIVATE ${C_FLAGS})
target_compile_options(alsoft.excommon PUBLIC ${C_FLAGS})
"""