constexpr          std::ostream&  operator <<  (       std::ostream&  left, const set_type auto& right ) requires printable    <                                           typename decay<decltype(right)>::value_type>;
constexpr          bool           operator ==  ( const set_type auto& left, const set_type auto& right ) requires equalable_to <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and                                                                                                         same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr          auto           operator <=> ( const set_type auto& left, const set_type auto& right ) requires comparable_to<typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr          bool           operator <<  ( const set_type auto& left, const set_type auto& right ) requires equalable_to <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr          bool           operator >>  ( const set_type auto& left, const set_type auto& right ) requires equalable_to <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr set_type auto           operator  +  ( const set_type auto& left, const set_type auto& right ) requires same_as      <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr set_type auto           operator  -  ( const set_type auto& left, const set_type auto& right ) requires same_as      <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr set_type auto           operator  |  ( const set_type auto& left, const set_type auto& right ) requires same_as      <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr set_type auto           operator  &  ( const set_type auto& left, const set_type auto& right ) requires same_as      <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr set_type auto           operator  ^  ( const set_type auto& left, const set_type auto& right ) requires same_as      <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr set_type auto&          operator  += (       set_type auto& left, const set_type auto& right ) requires requires { left = left + right; };
constexpr set_type auto&          operator  -= (       set_type auto& left, const set_type auto& right ) requires requires { left = left - right; };
constexpr set_type auto&          operator  |= (       set_type auto& left, const set_type auto& right ) requires requires { left = left | right; };
constexpr set_type auto&          operator  &= (       set_type auto& left, const set_type auto& right ) requires requires { left = left & right; };
constexpr set_type auto&          operator  ^= (       set_type auto& left, const set_type auto& right ) requires requires { left = left ^ right; };
 
constexpr          std::ostream&  operator <<  (       std::ostream&  left, const map_type auto& right ) requires printable    <                                         typename decay<decltype(right)>::key_type> and printable    <                                           typename decay<decltype(right)>::value_type>;
constexpr          bool           operator ==  ( const map_type auto& left, const map_type auto& right ) requires equalable_to <typename decay<decltype(left)>::key_type,typename decay<decltype(right)>::key_type> and equalable_to <typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type>                                                                                                         and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;
constexpr          auto           operator <=> ( const map_type auto& left, const map_type auto& right ) requires comparable_to<typename decay<decltype(left)>::key_type,typename decay<decltype(right)>::key_type> and comparable_to<typename decay<decltype(left)>::value_type,typename decay<decltype(right)>::value_type> and same_as<typename decay<decltype(left)>::compare_type,typename decay<decltype(right)>::compare_type> and same_as<typename decay<decltype(left)>::device_type,typename decay<decltype(right)>::device_type>;

#include "operator.cpp"